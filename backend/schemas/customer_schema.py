"""
Customer schemas for data validation and serialization.

This module contains Pydantic schemas for the Customer entity, including
schemas for creating customers and displaying customer information.
"""

from typing import Optional
from pydantic import BaseModel, EmailStr, Field


class CustomerCreate(BaseModel):
    """
    Schema for creating a new customer.
    
    This schema is used when creating a new customer record.
    The ID is not included as it's typically auto-generated by the database.
    """
    name: str = Field(..., min_length=1, max_length=255, description="Customer company name")
    contact_person: str = Field(..., min_length=1, max_length=255, description="Primary contact person")
    email: EmailStr = Field(..., description="Contact email address")
    phone: str = Field(..., min_length=1, max_length=50, description="Contact phone number")
    address: str = Field(..., min_length=1, max_length=500, description="Customer address")
    vat_number: Optional[str] = Field(None, max_length=50, description="VAT registration number")
    
    class Config:
        """Pydantic configuration."""
        json_schema_extra = {
            "example": {
                "name": "Acme Corporation",
                "contact_person": "John Doe",
                "email": "john.doe@acme.com",
                "phone": "+1-555-123-4567",
                "address": "123 Business St, Suite 100, City, State 12345",
                "vat_number": "US123456789"
            }
        }


class Customer(BaseModel):
    """
    Schema for displaying customer information.
    
    This schema is used when returning customer data from the API.
    It includes all fields including the auto-generated ID.
    """
    id: int = Field(..., description="Unique customer identifier")
    name: str = Field(..., description="Customer company name")
    contact_person: str = Field(..., description="Primary contact person")
    email: EmailStr = Field(..., description="Contact email address")
    phone: str = Field(..., description="Contact phone number")
    address: str = Field(..., description="Customer address")
    vat_number: Optional[str] = Field(None, description="VAT registration number")
    
    class Config:
        """Pydantic configuration."""
        from_attributes = True  # Enable ORM mode for SQLAlchemy models
        json_schema_extra = {
            "example": {
                "id": 1,
                "name": "Acme Corporation",
                "contact_person": "John Doe",
                "email": "john.doe@acme.com",
                "phone": "+1-555-123-4567",
                "address": "123 Business St, Suite 100, City, State 12345",
                "vat_number": "US123456789"
            }
        }